# ¬©Ô∏è @SACHIN_OWNER || @V_VIP_OWNER 
from telethon import __version__, events, Button
import asyncio
import sys
import heroku3
from time import time
from datetime import datetime
from telethon import events
from telethon.errors import ForbiddenError
from config import X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, OWNER_ID, SUDO_USERS, HEROKU_APP_NAME, HEROKU_API_KEY, CMD_HNDLR as hl
from telethon import events, version, Button
from telethon.tl.custom import button
from os import execl, getenv
from telethon.tl.functions.channels import LeaveChannelRequest

pongg = "s ·¥Ä …¥ ·¥Ä ·¥õ ·¥Ä …¥ …™"
PIC = "https://telegra.ph/file/57d2b8165f3640f5a3a55.mp4"
Alivemsg = "s·¥Ä…¥·¥Ä·¥õ·¥Ä…¥…™ x Íú±·¥ò·¥Ä·¥ç  ú·¥á Ä·¥á"

TEXT = f"‚ñ¨‚ñ≠‚ñ¨‚ñ≠‚ñ¨‚ñ≠‚ñ¨‚ñ≠‚ñ¨‚ñ≠‚ñ¨‚ñ≠‚ñ¨‚ñ≠\n„Ö§„Ö§‚ùñ | s·¥Ä…¥·¥Ä·¥õ·¥Ä…¥…™ Í≠ô  ô·¥è·¥õ | ‚ùñ\n‚ñ¨‚ñ≠‚ñ¨‚ñ≠‚ñ¨‚ñ≠‚ñ¨‚ñ≠‚ñ¨‚ñ≠‚ñ¨‚ñ≠‚ñ¨‚ñ≠\n‚ùñ ·¥ò è·¥õ ú·¥è…¥ ·¥†·¥á ÄÍú±…™·¥è…¥ : `4.15.7` \n‚ùñ  ô·¥è·¥õ ·¥†·¥á ÄÍú±…™·¥è…¥ : `M4.0` \n‚ùñ s·¥ú·¥ò·¥ò·¥è Ä·¥õ : [s·¥Ä…¥·¥Ä·¥õ·¥Ä…¥…™ Í≠ô  ô·¥è·¥õ](https://t.me/ALL_SANATANI_BOT)\n‚ùñ ·¥Ñ ú·¥Ä…¥…¥·¥á ü : [4À¢·µó Í≠ô “ì…™…¢ ú·¥õ·¥á Ä](https://t.me/+cW07X2RM_IBmYTI1)\n‚ùñ ·¥è·¥°…¥·¥á Ä : [s·¥Ä·¥Ñ ú…™…¥ s·¥Ä…¥·¥Ä·¥õ·¥Ä…¥…™](https://t.me/SACHIN_OWNER)\n‚ñ¨‚ñ≠‚ñ¨‚ñ≠‚ñ¨‚ñ≠‚ñ¨‚ñ≠‚ñ¨‚ñ≠‚ñ¨‚ñ≠‚ñ¨‚ñ≠"
                                  
@X1.on(events.NewMessage(incoming=True, pattern=r"\%salive(?: |$)(.*)" % hl))
@X2.on(events.NewMessage(incoming=True, pattern=r"\%salive(?: |$)(.*)" % hl))
@X3.on(events.NewMessage(incoming=True, pattern=r"\%salive(?: |$)(.*)" % hl))
@X4.on(events.NewMessage(incoming=True, pattern=r"\%salive(?: |$)(.*)" % hl))
@X5.on(events.NewMessage(incoming=True, pattern=r"\%salive(?: |$)(.*)" % hl))
@X6.on(events.NewMessage(incoming=True, pattern=r"\%salive(?: |$)(.*)" % hl))
@X7.on(events.NewMessage(incoming=True, pattern=r"\%salive(?: |$)(.*)" % hl))
@X8.on(events.NewMessage(incoming=True, pattern=r"\%salive(?: |$)(.*)" % hl))
@X9.on(events.NewMessage(incoming=True, pattern=r"\%salive(?: |$)(.*)" % hl))
@X10.on(events.NewMessage(incoming=True, pattern=r"\%salive(?: |$)(.*)" % hl))
async def alive(event):
  if event.sender_id in SUDO_USERS:
     await event.client.send_file(event.chat_id,
                                  PIC,
                                  caption=TEXT,
                                  buttons=[
        [
        Button.url("‚Ä¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ‚Ä¢", "https://t.me/devilbots971"),
        Button.url("‚Ä¢ Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢", "https://t.me/devilbotsupport")
        ],
        ]
        )
    
def get_readable_time(seconds: int) -> str:
    count = 0
    ping_time = ""
    time_list = []
    time_suffix_list = ["s", "m", "h", "days"]

    while count < 4:
        count += 1
        if count < 3:
            remainder, result = divmod(seconds, 60)
        else:
            remainder, result = divmod(seconds, 24)
        if seconds == 0 and remainder == 0:
            break
        time_list.append(int(result))
        seconds = int(remainder)

    for x in range(len(time_list)):
        time_list[x] = str(time_list[x]) + time_suffix_list[x]
    if len(time_list) == 4:
        ping_time += time_list.pop() + ", "

    time_list.reverse()
    ping_time += ":".join(time_list)

    return ping_time

@X1.on(events.NewMessage(incoming=True, pattern=r"\%slogs(?: |$)(.*)" % hl))
@X2.on(events.NewMessage(incoming=True, pattern=r"\%slogs(?: |$)(.*)" % hl))
@X3.on(events.NewMessage(incoming=True, pattern=r"\%slogs(?: |$)(.*)" % hl))
@X4.on(events.NewMessage(incoming=True, pattern=r"\%slogs(?: |$)(.*)" % hl))
@X5.on(events.NewMessage(incoming=True, pattern=r"\%slogs(?: |$)(.*)" % hl))
@X6.on(events.NewMessage(incoming=True, pattern=r"\%slogs(?: |$)(.*)" % hl))
@X7.on(events.NewMessage(incoming=True, pattern=r"\%slogs(?: |$)(.*)" % hl))
@X8.on(events.NewMessage(incoming=True, pattern=r"\%slogs(?: |$)(.*)" % hl))
@X9.on(events.NewMessage(incoming=True, pattern=r"\%slogs(?: |$)(.*)" % hl))
@X10.on(events.NewMessage(incoming=True, pattern=r"\%slogs(?: |$)(.*)" % hl))
async def logs(KEX):
    if KEX.sender_id == OWNER_ID:
        if (HEROKU_APP_NAME is None) or (HEROKU_API_KEY is None):
            await KEX.reply(
                KEX.chat_id,
                "Íú∞…™ ÄÍú±·¥õ Íú±·¥á·¥õ ·¥õ ú·¥áÍú±·¥á ·¥†·¥Ä ÄÍú± :  `HEROKU_API_KEY` And `HEROKU_APP_NAME`.",
            )
            return

        try:
            Heroku = heroku3.from_key(HEROKU_API_KEY)
            app = Heroku.app(HEROKU_APP_NAME)
        except BaseException:
            await KEX.reply(
                "·¥ç·¥Ä·¥ã·¥á Íú±·¥ú Ä·¥á  è·¥è·¥ú Ä  ú·¥á Ä·¥è·¥ã·¥ú ·¥ã·¥á è ·¥Ä…¥·¥Ö ·¥Ä·¥ò·¥ò …¥·¥Ä·¥ç·¥á ·¥Ä Ä·¥á ·¥Ñ·¥è…¥Íú∞…™…¢·¥ú·¥á·¥Ö ·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ ü è"
            )
            return

        logs = app.get_log()
        start = datetime.now()
        fetch = await KEX.reply(f"Íú∞·¥á·¥õ·¥Ñ ú ú…™…¥…¢  ü·¥è…¢Íú± ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥°·¥Ä…™·¥õ...")
    
        with open("Logs.txt", "w") as logfile:
            logfile.write("s·¥Ä…¥·¥Ä·¥õ·¥Ä…¥…™ ùöá üç∑ [ Bot Logs ]\n\n" + logs)

        end = datetime.now()
        ms = (end-start).seconds
        await asyncio.sleep(1)

        try:
            await X1.send_file(KEX.chat_id, " ü·¥è…¢Íú±.·¥õx·¥õ", caption=f"**s·¥Ä…¥·¥Ä·¥õ·¥Ä…¥…™  ô·¥è·¥õ  ü·¥è…¢Íú± üç∑**\n  ¬ª **·¥õ…™·¥ç·¥á ·¥õ·¥Ä·¥ã·¥á…¥ ‚åõ:** `{ms} Íú±·¥á·¥Ñ·¥è…¥·¥ÖÍú±`")
            await fetch.delete()
        except Exception as e:
            await fetch.edit(f"**·¥á Ä·¥è·¥è Ä:** {str(e)}")

    elif KEX.sender_id in SUDO_USERS:
        await KEX.reply("‚ùñ …¥·¥è·¥ò·¥á, ·¥è…¥ ü è ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥Ä·¥Ñ·¥Ñ·¥áÍú±Íú± ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö")

@X1.on(events.NewMessage(incoming=True, pattern=r"\%sleave(?: |$)(.*)" % hl))
@X2.on(events.NewMessage(incoming=True, pattern=r"\%sleave(?: |$)(.*)" % hl))
@X3.on(events.NewMessage(incoming=True, pattern=r"\%sleave(?: |$)(.*)" % hl))
@X4.on(events.NewMessage(incoming=True, pattern=r"\%sleave(?: |$)(.*)" % hl))
@X5.on(events.NewMessage(incoming=True, pattern=r"\%sleave(?: |$)(.*)" % hl))
@X6.on(events.NewMessage(incoming=True, pattern=r"\%sleave(?: |$)(.*)" % hl))
@X7.on(events.NewMessage(incoming=True, pattern=r"\%sleave(?: |$)(.*)" % hl))
@X8.on(events.NewMessage(incoming=True, pattern=r"\%sleave(?: |$)(.*)" % hl))
@X9.on(events.NewMessage(incoming=True, pattern=r"\%sleave(?: |$)(.*)" % hl))
@X10.on(events.NewMessage(incoming=True, pattern=r"\%sleave(?: |$)(.*)" % hl))
async def leave(e):
    if e.sender_id in SUDO_USERS:

        if len(e.text) > 7:
            event = await e.reply("‚ùñ  ü·¥á·¥Ä·¥†…™…¥…¢...")
            mkl = e.text.split(" ", 1)
            try:
                await event.client(LeaveChannelRequest(int(mkl[1])))
            except Exception as e:
                await event.edit(str(e))
        else:
             if e.is_private:
                  alt = f"**‚ùñ  è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥Ö·¥è ·¥õ ú…™Íú±  ú·¥á Ä·¥á !!**\n\n‚ùñ {hl} ü·¥á·¥Ä·¥†·¥á : ·¥õ è·¥ò·¥á ·¥õ ú…™Íú± …™…¥ …¢ Ä·¥è·¥ú·¥ò"
                  await e.reply(alt)
             else:
                  event = await e.reply("‚ùñ  ü·¥á·¥Ä·¥†…™…¥…¢...")
                  try:
                      await event.client(LeaveChannelRequest(int(e.chat_id)))
                  except Exception as e:
                      await event.edit(str(e))        

@X1.on(events.NewMessage(incoming=True, pattern=r"\%sping(?: |$)(.*)" % hl))
@X2.on(events.NewMessage(incoming=True, pattern=r"\%sping(?: |$)(.*)" % hl))
@X3.on(events.NewMessage(incoming=True, pattern=r"\%sping(?: |$)(.*)" % hl))
@X4.on(events.NewMessage(incoming=True, pattern=r"\%sping(?: |$)(.*)" % hl))
@X5.on(events.NewMessage(incoming=True, pattern=r"\%sping(?: |$)(.*)" % hl))
@X6.on(events.NewMessage(incoming=True, pattern=r"\%sping(?: |$)(.*)" % hl))
@X7.on(events.NewMessage(incoming=True, pattern=r"\%sping(?: |$)(.*)" % hl))
@X8.on(events.NewMessage(incoming=True, pattern=r"\%sping(?: |$)(.*)" % hl))
@X9.on(events.NewMessage(incoming=True, pattern=r"\%sping(?: |$)(.*)" % hl))
@X10.on(events.NewMessage(incoming=True, pattern=r"\%sping(?: |$)(.*)" % hl))
async def ping(e):
    if e.sender_id in SUDO_USERS:
        start = datetime.now()
        KEX = await e.reply(f"‚ùñ | s·¥Ä…¥·¥Ä·¥õ·¥Ä…¥…™ Í≠ô  ô·¥è·¥õ | ‚ùñ")
        end = datetime.now()
        mp = (end - start).microseconds / 10000
        await KEX.edit(f"‚ùñ | s·¥Ä…¥·¥Ä·¥õ·¥Ä…¥…™ Í≠ô  ô·¥è·¥õ | ‚ùñ\n‚ùñ ·¥õ ú·¥á ·¥ç·¥ús·¥õ ·¥ò·¥è·¥°·¥á Ä“ì·¥ú ü  ô·¥è·¥õ\n‚ùñ ·¥ò…™…¥…¢ ·¥ò·¥è…¥…¢ `{mp} ·¥çÍú±`") 

@X1.on(events.NewMessage(incoming=True, pattern=r"\%ssudo(?: |$)(.*)" % hl))
@X2.on(events.NewMessage(incoming=True, pattern=r"\%ssudo(?: |$)(.*)" % hl))
@X3.on(events.NewMessage(incoming=True, pattern=r"\%ssudo(?: |$)(.*)" % hl))
@X4.on(events.NewMessage(incoming=True, pattern=r"\%ssudo(?: |$)(.*)" % hl))
@X5.on(events.NewMessage(incoming=True, pattern=r"\%ssudo(?: |$)(.*)" % hl))
@X6.on(events.NewMessage(incoming=True, pattern=r"\%ssudo(?: |$)(.*)" % hl))
@X7.on(events.NewMessage(incoming=True, pattern=r"\%ssudo(?: |$)(.*)" % hl))
@X8.on(events.NewMessage(incoming=True, pattern=r"\%ssudo(?: |$)(.*)" % hl))
@X9.on(events.NewMessage(incoming=True, pattern=r"\%ssudo(?: |$)(.*)" % hl))
@X10.on(events.NewMessage(incoming=True, pattern=r"\%ssudo(?: |$)(.*)" % hl))
async def addsudo(event):
    if event.sender_id == OWNER_ID:
        Heroku = heroku3.from_key(HEROKU_API_KEY)
        sudousers = getenv("SUDO_USERS", default=None)

        ok = await event.reply(f"‚ùñ ·¥Ä·¥Ö·¥Ö…™…¥…¢ ·¥úÍú±·¥á Ä ·¥ÄÍú± Íú±·¥ú·¥Ö·¥è...")
        target = ""
        if HEROKU_APP_NAME is not None:
            app = Heroku.app(HEROKU_APP_NAME)
        else:
            await ok.edit("`[HEROKU]:" "\nPlease Setup Your` **HEROKU_APP_NAME**")
            return
        heroku_var = app.config()
        if event is None:
            return
        try:
            reply_msg = await event.get_reply_message()
            target = reply_msg.sender_id
        except:
            await ok.edit("‚ùñ  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥úÍú±·¥á Ä !!")
            return

        if str(target) in sudousers:
            await ok.edit(f"‚ùñ ·¥õ ú…™Íú± ·¥úÍú±·¥á Ä …™Íú± ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ä Íú±·¥ú·¥Ö·¥è ·¥úÍú±·¥á Ä !!")
        else:
            if len(sudousers) > 0:
                newsudo = f"{sudousers} {target}"
            else:
                newsudo = f"{target}"
            await ok.edit(f"‚ùñ **…¥·¥á·¥° Íú±·¥ú·¥Ö·¥è ·¥úÍú±·¥á Ä**\n‚ùñ …™·¥Ö - `{target}`\n‚ùñ  Ä·¥ás·¥õ·¥Ä Ä·¥õ…™…¥…¢  ô·¥è·¥õ...")
            heroku_var["SUDO_USERS"] = newsudo    
    
    elif event.sender_id in SUDO_USERS:
        await event.reply("‚ùñ Íú±·¥è Ä Ä è, ·¥è…¥ ü è ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥Ä·¥Ñ·¥Ñ·¥áÍú±Íú± ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")        

@X1.on(events.NewMessage(incoming=True, pattern=r"\%srestart(?: |$)(.*)" % hl))
@X2.on(events.NewMessage(incoming=True, pattern=r"\%srestart(?: |$)(.*)" % hl))
@X3.on(events.NewMessage(incoming=True, pattern=r"\%srestart(?: |$)(.*)" % hl))
@X4.on(events.NewMessage(incoming=True, pattern=r"\%srestart(?: |$)(.*)" % hl))
@X5.on(events.NewMessage(incoming=True, pattern=r"\%srestart(?: |$)(.*)" % hl))
@X6.on(events.NewMessage(incoming=True, pattern=r"\%srestart(?: |$)(.*)" % hl))
@X7.on(events.NewMessage(incoming=True, pattern=r"\%srestart(?: |$)(.*)" % hl))
@X8.on(events.NewMessage(incoming=True, pattern=r"\%srestart(?: |$)(.*)" % hl))
@X9.on(events.NewMessage(incoming=True, pattern=r"\%srestart(?: |$)(.*)" % hl))
@X10.on(events.NewMessage(incoming=True, pattern=r"\%srestart(?: |$)(.*)" % hl))
async def restart(e):
    if e.sender_id in SUDO_USERS:
        await e.reply(f"‚ùñ  Ä·¥áÍú±·¥õ·¥Ä Ä·¥õ…™…¥…¢...")
        try:
            await X1.disconnect()
        except Exception:
            pass
        try:
            await X2.disconnect()
        except Exception:
            pass
        try:
            await X3.disconnect()
        except Exception:
            pass
        try:
            await X4.disconnect()
        except Exception:
            pass
        try:
            await X5.disconnect()
        except Exception:
            pass
        try:
            await X6.disconnect()
        except Exception:
            pass
        try:
            await X7.disconnect()
        except Exception:
            pass
        try:
            await X8.disconnect()
        except Exception:
            pass
        try:
            await X9.disconnect()
        except Exception:
            pass
        try:
            await X10.disconnect()
        except Exception:
            pass

        execl(sys.executable, sys.executable, *sys.argv)
